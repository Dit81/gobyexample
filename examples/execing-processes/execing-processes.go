// В предыдущем примере мы рассмотрели, как [порождаются процессы](spawning-processes).
// Нам необходимо это когда внешний процесс доступен для
// запущенного Go процесса. Иногда нам нужно полностью заменить
// текущий Go процесс на другой (возможно не-GO). Для этого мы будет
// использовать классическую реализацию  <a href="http://en.wikipedia.org/wiki/Exec_(operating_system)"><code>exec</code></a>
// функции.

package main

import "syscall"
import "os"
import "os/exec"

func main() {

    // Для нашего примера мы выполним `ls`. Go требует абсолютный
    // путь к команде (программе) которую мы хотим отправить на выполнение, поэтому
    // мы будем использовать `exec.LookPath` для поиска местонахождения
    // `ls` (скорей всего `/bin/ls`).
    binary, lookErr := exec.LookPath("ls")
    if lookErr != nil {
        panic(lookErr)
    }
    // `Exec` требует аргументы в форме среза (вместо одной длинной строки).
    // Мы отправим как входные параметры несколько простых аргументов. Стоит заметить,
    // что первый аргумент должен быть название команды (программы).
    args := []string{"ls", "-a", "-l", "-h"}

    // `Exec`'у так же необходим набор [переменных окружения](environment-variables).
    // Мы будем просто использовать текущее окружение.
    env := os.Environ()

    // Это фактический вызов `syscall.Exec`. Если вызов будет успешным
    // выполнение нашей программы будет окончено тут и она будет заменена
    // процессом `/bin/ls -a -l -h`. Если произойдет ошибка, то мы ее
    // получим в возвращаемом значении.
    execErr := syscall.Exec(binary, args, env)
    if execErr != nil {
        panic(execErr)
    }
}
